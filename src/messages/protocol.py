"""
Defines the hierarchical agent-to-agent communication protocol.
Agents only communicate through:
- Delegation to children (parent -> child)
- Results to parent (child -> parent)

Each message includes task description and necessary context.
"""

from dataclasses import dataclass
from typing import Any, Dict, List, Optional, Union
from enum import Enum

'''
Defines the different types of messages that can be exchanged between agents.
In hierarchical communication, only DELEGATION and RESULT are used.
'''
class MessageType(Enum):
    DELEGATION = "delegation"  # Parent delegating task to child
    RESULT = "result"          # Child returning result to parent

@dataclass
class Task:
    '''
    Represents a task with its identifier and description.
    '''
    task_id: str
    task_string: str  # English description of the task, generated by the parent

@dataclass
class Message:
    '''
    Base message structure for hierarchical agent communication.
    '''
    message_type: MessageType
    sender_id: str
    recipient_id: str
    message_id: str

@dataclass
class TaskMessage(Message):
    '''
    Message for parent delegating task to child agent.
    Contains the task description and necessary context.
    '''
    task: Task

@dataclass
class ResultMessage(Message):
    '''
    Message for child returning task result to parent.
    Contains the result data and any context that should be passed back.
    '''
    task: Task
    result: str  # English description of the result of the task, generated by the child